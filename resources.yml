AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Phone Book app backend

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - sandbox
      - dev
      - qa
      - performance
      - security
      - staging
      - production
      - staging-green
  AllowedCorsOrigins:
    Type: String
  DBClusterName:
    Description: Aurora Postgres RDS cluster name
    Type: String
    Default: rds-cluster
  DBInstanceName:
    Description: Aurora Postgres RDS instance name
    Type: String
    Default: rds-cluster-instance
  DatabaseName:
    Description: Aurora Postgres RDS database name
    Type: String
    Default: phone_book_db
  DBAdminUserName:
    Description: The admin user name.
    Type: String
    Default: admin_user
  SecurityGroupIds:
    Type: String
  SubnetIds:
    Type: String

Globals:
  Function:
    Handler: app.lambdaHandler
    Runtime: nodejs14.x
    Timeout: 3
    Tracing: Active
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        DB_NAME: !Ref DatabaseName
        DB_CREDENTIALS_ARN: !Ref DBCredentialsSecret
        DB_ENDPOINT_ADDRESS: !GetAtt RDSCluster.Endpoint.Address
        DB_ENDPOINT_PORT: !GetAtt RDSCluster.Endpoint.Port
        # DB_CLUSTER_ARN: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}'
    Tags:
      app: phone-book-be

Resources:

#   █████╗ ██████╗ ██╗     ██████╗  █████╗ ████████╗███████╗██╗    ██╗ █████╗ ██╗   ██╗
#  ██╔══██╗██╔══██╗██║    ██╔════╝ ██╔══██╗╚══██╔══╝██╔════╝██║    ██║██╔══██╗╚██╗ ██╔╝
#  ███████║██████╔╝██║    ██║  ███╗███████║   ██║   █████╗  ██║ █╗ ██║███████║ ╚████╔╝
#  ██╔══██║██╔═══╝ ██║    ██║   ██║██╔══██║   ██║   ██╔══╝  ██║███╗██║██╔══██║  ╚██╔╝
#  ██║  ██║██║     ██║    ╚██████╔╝██║  ██║   ██║   ███████╗╚███╔███╔╝██║  ██║   ██║
#  ╚═╝  ╚═╝╚═╝     ╚═╝     ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚══════╝ ╚══╝╚══╝ ╚═╝  ╚═╝   ╚═╝
#

  PhoneBookBEApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: phone-book-be
      Description: API gateway for Phone Book BE
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: app
          Value: phone-book-be

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt PhoneBookBEApiGatewayRole.Arn

  PhoneBookBEApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials: !GetAtt LambdaAuthorizerInvocationRole.Arn
      AuthorizerResultTtlInSeconds: 300
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthorizer.Arn}:LambdaAuthorizerAlias/invocations'
      Type: TOKEN
      Name: PhoneBookBEApiAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref PhoneBookBEApiGateway

  PhoneBookBEApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - LoginMethod
    Properties:
      Description: !Sub "Phone Book backend ${Environment} API Gateway Deployment"
      RestApiId: !Ref PhoneBookBEApiGateway
      StageName: !Sub ${Environment}-phone-book-be
      StageDescription:
        Description: !Sub "Stage ${Environment}-PhoneBookBE"
        CachingEnabled: false
        LoggingLevel: INFO
        Tags:
          - Key: app
            Value: phone-book-be-api

  RequestParametersValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: RequestParametersValidator
      RestApiId: !Ref PhoneBookBEApiGateway
      ValidateRequestBody: false
      ValidateRequestParameters: true

  RequestBodyValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: RequestBodyValidator
      RestApiId: !Ref PhoneBookBEApiGateway
      ValidateRequestBody: true
      ValidateRequestParameters: false

  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt PhoneBookBEApiGateway.RootResourceId
      PathPart: login
      RestApiId: !Ref PhoneBookBEApiGateway

  LoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PhoneBookBEApiGateway
      ResourceId: !Ref LoginResource
      OperationName: Login
      HttpMethod: POST
      AuthorizationType: NONE
      RequestValidatorId: !Ref RequestBodyValidator
      RequestModels:
        application/json: !Ref LoginModel
      Integration:
        Type: AWS
        Credentials: !GetAtt PhoneBookBEApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginLambda.Arn}:LoginLambdaAlias/invocations"
        RequestTemplates:
          application/json: |
            {
              "email": "$input.path('email')",
              "password": "$input.path('password')"
            }
        PassthroughBehavior: WHEN_NO_TEMPLATES
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: |
                {
                  "result": $input.json('$')
                }
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
          - StatusCode: '401'
            SelectionPattern: '401.*'
            ResponseTemplates:
              application/json: |
                {
                  "result": { "message": "$input.path('$').errorMessage" }
                }
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
          - StatusCode: '500'
            SelectionPattern: '500.*'
            ResponseTemplates:
              application/json: |
                {
                  "result" : { "message": "Internal Server Error" }
                }
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers:
              type: string
            method.response.header.Access-Control-Allow-Methods:
              type: string
            method.response.header.Access-Control-Allow-Origin:
              type: string
        - StatusCode: '401'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers:
              type: string
            method.response.header.Access-Control-Allow-Methods:
              type: string
            method.response.header.Access-Control-Allow-Origin:
              type: string
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers:
              type: string
            method.response.header.Access-Control-Allow-Methods:
              type: string
            method.response.header.Access-Control-Allow-Origin:
              type: string

  LoginOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref PhoneBookBEApiGateway
      ResourceId: !Ref LoginResource
      HttpMethod: OPTIONS
      Integration:
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
          ResponseTemplates:
            application/json: ''
        Type: MOCK
        PassthroughBehavior: WHEN_NO_TEMPLATES
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers:
              type: string
            method.response.header.Access-Control-Allow-Methods:
              type: string
            method.response.header.Access-Control-Allow-Origin:
              type: string

  SignupResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt PhoneBookBEApiGateway.RootResourceId
      PathPart: signup
      RestApiId: !Ref PhoneBookBEApiGateway

  SignupMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PhoneBookBEApiGateway
      ResourceId: !Ref SignupResource
      OperationName: Signup
      HttpMethod: POST
      AuthorizationType: NONE
      RequestValidatorId: !Ref RequestBodyValidator
      RequestModels:
        application/json: !Ref SignupModel
      Integration:
        Type: AWS
        Credentials: !GetAtt PhoneBookBEApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignupLambda.Arn}:SignupLambdaAlias/invocations"
        RequestTemplates:
          application/json: |
            {
              "email": "$input.path('email')",
              "password": "$input.path('password')",
              "name": "$input.path('name')"
            }
        PassthroughBehavior: WHEN_NO_TEMPLATES
        IntegrationResponses:
          - StatusCode: '202'
            ResponseTemplates:
              application/json: |
                {
                  "result": $input.json('$')
                }
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
          - StatusCode: '500'
            SelectionPattern: '500.*'
            ResponseTemplates:
              application/json: |
                {
                  "result" : { "message": "Internal Server Error" }
                }
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      MethodResponses:
        - StatusCode: '202'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers:
              type: string
            method.response.header.Access-Control-Allow-Methods:
              type: string
            method.response.header.Access-Control-Allow-Origin:
              type: string
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers:
              type: string
            method.response.header.Access-Control-Allow-Methods:
              type: string
            method.response.header.Access-Control-Allow-Origin:
              type: string

  SignupOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref PhoneBookBEApiGateway
      ResourceId: !Ref SignupResource
      HttpMethod: OPTIONS
      Integration:
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
          ResponseTemplates:
            application/json: ''
        Type: MOCK
        PassthroughBehavior: WHEN_NO_TEMPLATES
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers:
              type: string
            method.response.header.Access-Control-Allow-Methods:
              type: string
            method.response.header.Access-Control-Allow-Origin:
              type: string

#  ███╗   ███╗ ██████╗ ██████╗ ███████╗██╗     ███████╗
#  ████╗ ████║██╔═══██╗██╔══██╗██╔════╝██║     ██╔════╝
#  ██╔████╔██║██║   ██║██║  ██║█████╗  ██║     ███████╗
#  ██║╚██╔╝██║██║   ██║██║  ██║██╔══╝  ██║     ╚════██║
#  ██║ ╚═╝ ██║╚██████╔╝██████╔╝███████╗███████╗███████║
#  ╚═╝     ╚═╝ ╚═════╝ ╚═════╝ ╚══════╝╚══════╝╚══════╝
#

  LoginModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref PhoneBookBEApiGateway
      ContentType: application/json
      Description: Login model
      Name: LoginModel
      Schema:
        "$schema": "http://json-schema.org/draft-04/schema#"
        title: LoginModel
        type: object
        required:
          - email
          - password
        properties:
          email:
            type: string
            format: email
          password:
            type: string
            minLength: 8
            maxLength: 24

  SignupModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref PhoneBookBEApiGateway
      ContentType: application/json
      Description: Signup model
      Name: SignupModel
      Schema:
        "$schema": "http://json-schema.org/draft-04/schema#"
        title: SignupModel
        type: object
        required:
          - email
          - password
          - name
        properties:
          email:
            type: string
            format: email
          password:
            type: string
            minLength: 8
            maxLength: 24
          name:
            type: string

#   ██████╗  █████╗ ████████╗███████╗██╗    ██╗ █████╗ ██╗   ██╗    ██████╗ ███████╗███████╗██████╗  ██████╗ ███╗   ██╗███████╗███████╗███████╗
#  ██╔════╝ ██╔══██╗╚══██╔══╝██╔════╝██║    ██║██╔══██╗╚██╗ ██╔╝    ██╔══██╗██╔════╝██╔════╝██╔══██╗██╔═══██╗████╗  ██║██╔════╝██╔════╝██╔════╝
#  ██║  ███╗███████║   ██║   █████╗  ██║ █╗ ██║███████║ ╚████╔╝     ██████╔╝█████╗  ███████╗██████╔╝██║   ██║██╔██╗ ██║███████╗█████╗  ███████╗
#  ██║   ██║██╔══██║   ██║   ██╔══╝  ██║███╗██║██╔══██║  ╚██╔╝      ██╔══██╗██╔══╝  ╚════██║██╔═══╝ ██║   ██║██║╚██╗██║╚════██║██╔══╝  ╚════██║
#  ╚██████╔╝██║  ██║   ██║   ███████╗╚███╔███╔╝██║  ██║   ██║       ██║  ██║███████╗███████║██║     ╚██████╔╝██║ ╚████║███████║███████╗███████║
#   ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚══════╝ ╚══╝╚══╝ ╚═╝  ╚═╝   ╚═╝       ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝      ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚══════╝╚══════╝
#

  GatewayResponseAccessDenied:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: ACCESS_DENIED
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseApiConfigurationError:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: API_CONFIGURATION_ERROR
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseAuthorizerFailure:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: AUTHORIZER_FAILURE
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseAuthorizerConfigurationError:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: AUTHORIZER_CONFIGURATION_ERROR
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseBadRequestParameters:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: BAD_REQUEST_PARAMETERS
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseBadRequestBody:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: BAD_REQUEST_BODY
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseDefault4xx:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseDefault5xx:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: DEFAULT_5XX
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseExpiredToken:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: EXPIRED_TOKEN
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseInvalidSignature:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: INVALID_SIGNATURE
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseIntegrationFailure:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: INTEGRATION_FAILURE
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseIntegrationTimeout:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: INTEGRATION_TIMEOUT
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseInvalidApiKey:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: INVALID_API_KEY
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseMissingAuthenticationToken:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message": "Method Not Allowed" }
          }
      ResponseType: MISSING_AUTHENTICATION_TOKEN
      RestApiId: !Ref PhoneBookBEApiGateway
      StatusCode: '405'
  GatewayResponseQuotaExceeded:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: QUOTA_EXCEEDED
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseRequestTooLarge:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: REQUEST_TOO_LARGE
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseResourceNotFound:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: RESOURCE_NOT_FOUND
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseThrottled:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: THROTTLED
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseUnauthorized:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref PhoneBookBEApiGateway
  GatewayResponseUnsupportedMediaType:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Channel,Access-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: !Sub "'${AllowedCorsOrigins}'"
      ResponseTemplates:
        application/json: |
          {
            "result": { "message":$context.error.messageString }
          }
      ResponseType: UNSUPPORTED_MEDIA_TYPE
      RestApiId: !Ref PhoneBookBEApiGateway

#  ██████╗  ██████╗ ██╗     ███████╗███████╗
#  ██╔══██╗██╔═══██╗██║     ██╔════╝██╔════╝
#  ██████╔╝██║   ██║██║     █████╗  ███████╗
#  ██╔══██╗██║   ██║██║     ██╔══╝  ╚════██║
#  ██║  ██║╚██████╔╝███████╗███████╗███████║
#  ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝╚══════╝
#

  PhoneBookBEApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ApiGatewayServiceMainRole
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - apigateway.amazonaws.com
      Policies:
        - PolicyName: apigateway
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                  - lambda:InvokeFunction
                Resource: "*"
      Tags:
        - Key: app
          Value: phone-book-be

  LambdaAuthorizerInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowGatewayAuthorizerToInvokeLambda
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - apigateway.amazonaws.com
      Policies:
        - PolicyName: CallLambdaAuthorizerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Ref LambdaAuthorizer.Alias
      Tags:
        - Key: app
          Value: phone-book-be

  # LoginInvocationRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: ApiGatewayServiceLambdaInvocationRole
  #           Effect: Allow
  #           Action:
  #             - sts:AssumeRole
  #           Principal:
  #             Service:
  #               - apigateway.amazonaws.com
  #     Policies:
  #       - PolicyName: SubscriptionStatusPolicy
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - lambda:InvokeFunction
  #               Resource:
  #                 - !Ref subscriptionStatus.Alias

#  ██╗      █████╗ ███╗   ███╗██████╗ ██████╗  █████╗
#  ██║     ██╔══██╗████╗ ████║██╔══██╗██╔══██╗██╔══██╗
#  ██║     ███████║██╔████╔██║██████╔╝██║  ██║███████║
#  ██║     ██╔══██║██║╚██╔╝██║██╔══██╗██║  ██║██╔══██║
#  ███████╗██║  ██║██║ ╚═╝ ██║██████╔╝██████╔╝██║  ██║
#  ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝╚═════╝ ╚═════╝ ╚═╝  ╚═╝
#

  LambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: PhoneBookBELambdaAuthorizer
      CodeUri: src/lambda-authorizer
      AutoPublishAlias: LambdaAuthorizerAlias

  LoginLambda:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: Login
      CodeUri: src/login
      AutoPublishAlias: LoginLambdaAlias
      VpcConfig:
        SecurityGroupIds: !Split [',', !Ref SecurityGroupIds]
        SubnetIds: !Split [',', !Ref SubnetIds]
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:ListSecretVersionIds
            Resource: '*'
            # SecretArn: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
        - Statement:
          - Effect: Allow
            Action: 'rds-data:ExecuteStatement'
            Resource: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}'
        - Statement:
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
            Resource: "*"

  SignupLambda:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: Signup
      CodeUri: src/sign-up
      AutoPublishAlias: SignupLambdaAlias
      VpcConfig:
        SecurityGroupIds: !Split [',', !Ref SecurityGroupIds]
        SubnetIds: !Split [',', !Ref SubnetIds]
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:ListSecretVersionIds
            # Resource: '*'
            Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
            # SecretArn: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
        - Statement:
          - Effect: Allow
            Action: 'rds-data:ExecuteStatement'
            Resource: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}'
        - Statement:
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
            Resource: "*"

  DBSetup:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: DBSetup
      CodeUri: src/db-setup
      AutoPublishAlias: DBSetupAlias
      VpcConfig:
        SecurityGroupIds: !Split [',', !Ref SecurityGroupIds]
        SubnetIds: !Split [',', !Ref SubnetIds]
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref DBCredentialsSecret
        - Statement:
          - Effect: Allow
            Action: 'rds-data:ExecuteStatement'
            Resource: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}'
        - Statement:
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
            Resource: "*"

  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Ref DBClusterName
      MasterUsername: !Sub '{{resolve:secretsmanager:${DBCredentialsSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBCredentialsSecret}:SecretString:password}}'
      DatabaseName: !Ref DatabaseName
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: '10.18'
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 2
        MinCapacity: 2
        SecondsUntilAutoPause: 900 # 15 min

  DBCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${DBClusterName}-credentials'
      Description: RDS database user credentials
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBAdminUserName}"}'
        GenerateStringKey: password
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: app
          Value: phone-book-be

Outputs:
  apiStageName:
    Value: !Sub ${Environment}-phone-book-be

  apiGatewayId:
    Value: !Sub ${PhoneBookBEApiGateway}

  region:
    Value: !Sub ${AWS::Region}
